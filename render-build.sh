#!/bin/bash
set -e

echo "🔧 Starting render-build.sh..."

# Define binary install location
BIN_DIR="$HOME/bin"

# Create a safe binary directory in the user's home
echo "📁 Creating $BIN_DIR..."
mkdir -p "$BIN_DIR"
chmod 755 "$BIN_DIR"

# Download the latest yt-dlp binary from GitHub
echo "⬇️ Downloading yt-dlp..."

# Try GitHub URL first
if ! curl -L -f -S --retry 3 --retry-delay 3 https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o "$BIN_DIR/yt-dlp"; then
  echo "⚠️ GitHub download failed, trying fallback URL..."
  # Try fallback URL
  curl -L -f -S --retry 3 --retry-delay 3 https://yt-dlp.org/latest/yt-dlp -o "$BIN_DIR/yt-dlp"
fi

# Make it executable
chmod +x "$BIN_DIR/yt-dlp"
echo "✅ yt-dlp downloaded and made executable."

# Add the bin directory to PATH
export PATH="$BIN_DIR:$PATH"
echo "export PATH=$BIN_DIR:$PATH" >> ~/.bashrc

# Create temp directory
echo "📁 Creating temp directory..."
mkdir -p "./temp"
chmod 755 "./temp"

# Create node_modules/.bin directory if it doesn't exist
echo "📁 Creating node_modules/.bin directory..."
mkdir -p "./node_modules/.bin"

# Create node_modules/yt-dlp-exec/bin directory if it doesn't exist
echo "📁 Creating node_modules/yt-dlp-exec/bin directory..."
mkdir -p "./node_modules/yt-dlp-exec/bin"

# Create symlinks to yt-dlp in various locations
echo "🔗 Creating symlinks to yt-dlp..."
ln -sf "$BIN_DIR/yt-dlp" "./node_modules/.bin/yt-dlp"
ln -sf "$BIN_DIR/yt-dlp" "./node_modules/yt-dlp-exec/bin/yt-dlp"
ln -sf "$BIN_DIR/yt-dlp" "./yt-dlp"

# Try to create a symlink in /usr/local/bin if possible (might require sudo)
if [ -w "/usr/local/bin" ]; then
  echo "📁 Creating symlink in /usr/local/bin..."
  ln -sf "$BIN_DIR/yt-dlp" "/usr/local/bin/yt-dlp"
fi

# Verify installations
echo "🔍 Verifying installations..."
which yt-dlp || echo "⚠️ yt-dlp not found in PATH"
ls -la "./node_modules/.bin/yt-dlp" || echo "⚠️ Symlink in node_modules/.bin not created"
ls -la "./node_modules/yt-dlp-exec/bin/yt-dlp" || echo "⚠️ Symlink in node_modules/yt-dlp-exec/bin not created"

# Download youtube-cookies.txt from Google Drive
echo "⬇️ Downloading youtube-cookies.txt from Google Drive..."

# Google Drive file ID from the shared link
FILE_ID="13_F3sWRws8XHFH-SQCmhBDdJNk9cP1gX"

# Create a temporary file for cookies
touch /tmp/gcookie

# First request to get the confirmation token
echo "🔍 Getting download confirmation token..."
CONFIRM=$(curl -sc /tmp/gcookie "https://drive.google.com/uc?export=download&id=${FILE_ID}" | grep -o 'confirm=[^&]*' | sed 's/confirm=//')

# Download the file using the confirmation token
echo "⬇️ Downloading the file..."
curl -Lb /tmp/gcookie "https://drive.google.com/uc?export=download&confirm=${CONFIRM}&id=${FILE_ID}" -o youtube-cookies.txt

# Check if download was successful
if [ -f "./youtube-cookies.txt" ] && [ -s "./youtube-cookies.txt" ]; then
  chmod 644 ./youtube-cookies.txt
  echo "✅ youtube-cookies.txt downloaded successfully"
else
  echo "⚠️ Download failed, creating placeholder youtube-cookies.txt..."
  cat > ./youtube-cookies.txt << 'EOL'
# Netscape HTTP Cookie File
# This file is generated by yt-dlp.  Do not edit.
# This file is used for YouTube authentication
# Format: domain_name TRUE|FALSE path secure expiry name value
.youtube.com	TRUE	/	FALSE	0	YSC	placeholder
.youtube.com	TRUE	/	TRUE	0	CONSENT	placeholder
.youtube.com	TRUE	/	FALSE	0	LOGIN_INFO	placeholder
.youtube.com	TRUE	/	FALSE	0	SID	placeholder
.youtube.com	TRUE	/	FALSE	0	__Secure-1PSID	placeholder
.youtube.com	TRUE	/	FALSE	0	__Secure-3PSID	placeholder
.youtube.com	TRUE	/	FALSE	0	SSID	placeholder
.youtube.com	TRUE	/	FALSE	0	AECHID	placeholder
.youtube.com	TRUE	/	FALSE	0	SAPISID	placeholder
.youtube.com	TRUE	/	FALSE	0	__Secure-1PSIDTS	placeholder
.youtube.com	TRUE	/	FALSE	0	__Secure-3PSIDTS	placeholder
EOL
  chmod 644 ./youtube-cookies.txt
  echo "✅ Created placeholder youtube-cookies.txt as fallback"
fi

echo "✅ Build script completed successfully."
